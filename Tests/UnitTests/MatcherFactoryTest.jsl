// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

MatcherFactoryTests = ut test case( "MatcherFactoryTests" )
	<<Setup(Expr(
		should deploy = ut should deploy documented functions;
		documented functions = ut documented functions;
		ut documented functions = {};
	))
	<<Teardown(Expr(
		ut documented functions = documented functions;
		ut should deploy documented functions = should deploy;
	));

ut test(MatcherFactoryTests, "MatcherFactoryRegistered", Expr(
	ut should deploy documented functions = 1;
	ut matcher factory("test factory");

	// added as matcher factory
	ut assert value( ut matcher factories, ut contains( Expr( test factory ) ) );
));

ut test(MatcherFactoryTests, "UnregisterRemovesMatcherFactory", Expr(
	ut should deploy documented functions = 1;
	ut matcher factory("test factory");
	
	ut unregister matcher factory("test factory");
	ut assert value( ut matcher factories, ut not( ut contains( Expr( test factory ) ) ) );
));

ut test(MatcherFactoryTests, "NoFunctionDefinitionLeavesUndefined", Expr(
	ut should deploy documented functions = 1;
	ut matcher factory("test factory");
	
	// no function defined
	ut assert that( Expr( test factory() ), ut throws name unresolved( "test factory" ) );

));

ut test(MatcherFactoryTests, "NoFunctionDefinitionNotDocumented", Expr(
	ut should deploy documented functions = 1;
	ut matcher factory("test factory");

	// not added as documented function
	ut assert value( ut documented functions, ut n items( 0 ) );

));

ut test(MatcherFactoryTests, "FunctionDefinitionAssignsToGlobal", Expr(
	ut should deploy documented functions = 1;
	ut matcher factory("test factory", Expr(Function({}, 5 )) );

	// defined in global
	ut assert that( Expr( ::test factory() ), 5 );
	
));

ut test(MatcherFactoryTests, "FunctionDefinitionAddedAsDocmented", Expr(
	ut should deploy documented functions = 1;
	ut matcher factory("test factory", Expr(Function({}, 5 )) );

	// added to documented functions list
	ut assert value( ut documented functions, ut n items( 1 ) );
	
));

ut test(MatcherFactoryTests, "FunctionDefinitionOverwritesAfterDeploy", Expr(
	ut should deploy documented functions = 1;
	ut matcher factory("test factory", Expr(Function({}, 5 )) );
	
	// Function that will get overwritten by a deploy
	::test factory = Function({}, 10 );
	
	ut deploy documented functions();
	// Should overwrite to original defined function
	ut assert that( Expr( ::test factory() ), 5 );
	
	// Removing deployed function should not throw
	ut assert that( Expr( Remove Custom Functions( "::test factory" ) ), ut no throw() );

), ut log bench( 0 ) );

ut test(MatcherFactoryTests, "FunctionDefinitionWithDocumentation", Expr(
	ut should deploy documented functions = 1;
	ut matcher factory("test factory", Expr(Function({}, 5 )), "test factory()", "a description" );

	cf = ut documented functions[1];
	
	// test that all documentation is put in the right place
	ut assert value( cf, ut name( "test factory" ) );
	ut assert value( cf, ut message( "test factory()", "prototype", "Get Prototype" ) );
	ut assert value( cf, ut message( "a description", "description", "Get Description" ) );

));

ut test(MatcherFactoryTests, "DocumentationOffNotAddedAsDocumented", Expr(
	// Opt out of documented functions
	ut should deploy documented functions = 0;
	ut matcher factory("test factory", Expr(Function({}, 5 )) );

	// NOT added to documented functions list
	ut assert value( ut documented functions, ut n items( 0 ) );

));

ut test(MatcherFactoryTests, "DocumentationOffStillDefinedInGlobal", Expr(
	// Opt out of documented functions
	ut should deploy documented functions = 0;
	ut matcher factory("test factory", Expr(Function({}, 5 )) );

	// still defined in global
	ut assert that( Expr( ::test factory() ), 5 );

));

ut test(MatcherFactoryTests, "DocumentationOffDoesNotDeploy", Expr(
	ut should deploy documented functions = 0;
	ut matcher factory("test factory", Expr(Function({}, 5 )) );

	ut deploy documented functions();

	// Remove Custom Functions should throw when function is not a custom function
	ut assert that( Expr( Remove Custom Functions( "::test factory" ) ), ut throws( ut anything() ) );

));
